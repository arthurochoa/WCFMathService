//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleMathClient.MathServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Complex", Namespace="http://schemas.datacontract.org/2004/07/WcfMathServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Complex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImaginaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RealField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Imaginary {
            get {
                return this.ImaginaryField;
            }
            set {
                if ((this.ImaginaryField.Equals(value) != true)) {
                    this.ImaginaryField = value;
                    this.RaisePropertyChanged("Imaginary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Real {
            get {
                return this.RealField;
            }
            set {
                if ((this.RealField.Equals(value) != true)) {
                    this.RealField = value;
                    this.RaisePropertyChanged("Real");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathServiceReference.IMath")]
    public interface IMath {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Add", ReplyAction="http://tempuri.org/IMath/AddResponse")]
        double Add(double i, double j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Sub", ReplyAction="http://tempuri.org/IMath/SubResponse")]
        double Sub(double i, double j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/AddComplexNo", ReplyAction="http://tempuri.org/IMath/AddComplexNoResponse")]
        ConsoleMathClient.MathServiceReference.Complex AddComplexNo(ConsoleMathClient.MathServiceReference.Complex i, ConsoleMathClient.MathServiceReference.Complex j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/SubComplexNo", ReplyAction="http://tempuri.org/IMath/SubComplexNoResponse")]
        ConsoleMathClient.MathServiceReference.Complex SubComplexNo(ConsoleMathClient.MathServiceReference.Complex i, ConsoleMathClient.MathServiceReference.Complex j);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathChannel : ConsoleMathClient.MathServiceReference.IMath, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathClient : System.ServiceModel.ClientBase<ConsoleMathClient.MathServiceReference.IMath>, ConsoleMathClient.MathServiceReference.IMath {
        
        public MathClient() {
        }
        
        public MathClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double i, double j) {
            return base.Channel.Add(i, j);
        }
        
        public double Sub(double i, double j) {
            return base.Channel.Sub(i, j);
        }
        
        public ConsoleMathClient.MathServiceReference.Complex AddComplexNo(ConsoleMathClient.MathServiceReference.Complex i, ConsoleMathClient.MathServiceReference.Complex j) {
            return base.Channel.AddComplexNo(i, j);
        }
        
        public ConsoleMathClient.MathServiceReference.Complex SubComplexNo(ConsoleMathClient.MathServiceReference.Complex i, ConsoleMathClient.MathServiceReference.Complex j) {
            return base.Channel.SubComplexNo(i, j);
        }
    }
}
